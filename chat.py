#import libraries
from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer
import os

#Create a chatbot
bot=ChatBot('AIbot')
bot.set_trainer(ListTrainer)

#training on english dataset
# for files in os.listdir('./english/'):
#     data=open('./english/'+files,'r').readlines()
#     bot.train(data)

bot.train(['What is your name?', 'My name is Aibot'])
bot.train(['Who are you?', 'I am a bot, created by you' ])
bot.train(['what is an agent?', 'an agent is anything that can be considered as perceiving its environment through sensors and acting upon that environment through actuators.'])
bot.train(['what is a percept?', 'an agent\'s perceptual input at any given instant.'])
bot.train(['what is a percept sequence?', 'this is the complete history of everything the agent has ever perceived'])
bot.train(['what do you think about sensors?', 'they are both a bridge and a bottleneck between environment and the agent'])
bot.train(['what does an agent function do?', 'an agent function maps any given percept sequence to an action.'])
bot.train(['what is an agent function?', 'an agent function is an external characterization of the agent.'])
bot.train(['what is an agent program?', 'an agent program is the program which is used to implement the agent function.'])
bot.train(['what does an agent program run on?', 'the physical architecture of the system.'])
bot.train(['what is a performance measure?', 'a performance measure is the way we determine if an agent\'s actions are successful.'])
bot.train(['what characterizes a good performance measure?', 'a good performance measure is objective.'])
bot.train(['who develops the performance measure?', 'the designer constructing the agent.'])
bot.train(['what are the elements of rationality?', 'performance measure prior knowledge of the environment actions that can be performed percept sequence to date.'])
bot.train(['what is rationality?', 'rationality is selecting the action which is most likely to achieve the desired outcome.'])
bot.train(['what is rationality not?', 'omniscient or clairvoyant or successful.'])
bot.train(['what does peas mean?', 'performance measure environment actuators sensors.'])
bot.train(['what is a reflex agent?', 'an agent that selects an action only based on one percept.'])
bot.train(['what is a reflex agent with state?', 'it is a reflex agent that also uses the current state along with the current percept to make a decision.'])
bot.train(['what is a goal based agent?', 'an agent that is attempting to reach a goal.'])
bot.train(['what is a utility based agent?', 'similar to a goal based agent except it also tries to optimize the path to the goal based on a utility function.'])
bot.train(['what is a goal formation?', 'developing a list of desirable states for the system.'])
bot.train(['can we have more than one goal state?', 'yes'])
bot.train(['what is problem formulation?', 'the process of deciding what actions and states to consider given a goal.'])
bot.train(['what environment is needed for uninformed search?', 'the environment needs to be observable discrete known and deterministic.'])
bot.train(['what sort of solution is provided by uninformed search?', 'a fixed sequence of actions.'])
bot.train(['what is a fundamental agent design for uninformed search?', 'formulate search and execute.'])
bot.train(['what do we mean by fse?', 'formulate search and execute.'])
bot.train(['what makes up a well defined problem for uninformed search?', 'an initial state a set of permissible actions a transition model a goal test and the path cost.'])
bot.train(['what is abstraction?', 'a simplified representation of the real world.'])
bot.train(['what is good abstraction?', 'an abstraction which removes as much detail as possible while retaining validity.'])
bot.train(['do you like travelling?', 'only if i know the path cost.'])
bot.train(['what type of a problem is a deterministic fully observable environment?', 'that is a single state problem.'])
bot.train(['what type of a problem is non observable?', 'that is a conformant problem.'])
bot.train(['what type of a problem is non deterministic?', 'that is a contingency problem.'])
bot.train(['what type of a problem has an unknown state space?', 'that is an exploration problem.'])
bot.train(['what do you think of vacuums?', 'that they should stay in their little vacuum world.'])
bot.train(['what do you think of the real world?', 'it is absurdly complex.'])
bot.train(['what do you think of abstraction?', 'it is a lot easier than dealing with the real world.'])
bot.train(['what is your favorite tree search algorithm?', 'depends on what i am trying to model.'])
bot.train(['what is a tree?', 'a series of nodes organized into parents and children.'])
bot.train(['what is completeness?', 'completeness is the metric which asks if a strategy will always find a solution if it exists.'])
bot.train(['what is time complexity?', 'the number of nodes expanded by a tree search.'])
bot.train(['what is space complexity?', 'how many nodes that need to be stored in memory.'])
bot.train(['what is optimality?', 'does a strategy always find a least cost solution'])
bot.train(['what is breadth first search?', 'a method of expanding a tree by expanding the shallowest unexpanded node.'])
bot.train(['is breadth first search complete?', 'yes'])
bot.train(['is breadth first search optimal?', 'only if cost is 1 per step.'])
bot.train(['what is the problem with breadth first search?', 'it takes up a ton of space.'])
bot.train(['what is uniform cost search?', 'it is a search strategy similar to breadth first search but it expands the node with the lowest path cost rather than just the shallowest node.'])
bot.train(['what is depth first search?', 'depth first search expands the deepest unexpanded node in the tree.'])
bot.train(['how does greedy search work?', 'expand the node that appears to be closest to the goal in hopes of quickly leading to a solution.'])
bot.train(['what are the properties of greedy search?', 'not complete, Time: O(b^m), Space: O(b^m), Not optimal.'])
bot.train(['what is the evaluation function for a star search?', 'f(n) = g(n) + h(n).'])
bot.train(['explain the evaluation function for a star search ?', ' g(n) - cost so far to reach node n, h(n) - estimated cost from n to goal, f(n) - estimated total cost of path through n to goal.'])
bot.train(['what are the advantages of using heuristics?', 'heuristics dramatically reduce search cost.'])
bot.train(['how do local search algorithms differ from other searches?', 'operate using a single current state and generally move only to neighbors of that state.'])
bot.train(['what are the two advantages of local search?', 'use very little memory and find reasonable solutions in large or infinite space in little time.'])
bot.train(['what are the names of some local search algorithms?', 'local beam, hill-climbing, simulated annealing.'])
bot.train(['what are some hill-climbing variants?', 'random-restart and random sideways. '])
bot.train(['what is a disadvantage to hill-climbing?', 'once it finds the local maxima, it may ignore the actual highest point.'])
bot.train(['what is a disadvantage to hill-climbing?', 'if it hits a plateau, it may no longer keep searching/may get stuck.'])
bot.train(['what is the main idea behind csp?', 'to eliminate large portions of the search space by identifying variables or values that violate specified constraints.'])
bot.train(['what are the components of csp?', 'a set of variable x, a set of domains d, and a set of constraints c.'])
bot.train(['what do constraints consist of?', 'scope: tuple of variables that participate in the constraint and rel: a relation that defines the values that variable can take on.'])
bot.train(['why should I use csp?', 'csps yield a natural representation for a wide variety of problems and can be solved faster than state-space searchers.'])
bot.train(['3 fundamental ways of manipulating visual data?', 'spatial masks, frequency domain filters and convolution masks.'])
bot.train(['what is sound?', 'air molecules being compressed and expanded under the actions of some physical device.'])
bot.train(['what are the two components of sound?', 'frequency and amplitude.'])
bot.train(['what is amplitude?', 'the ‘loudness’ of a sound.'])
bot.train(['what is frequency?', 'the differences between sounds; different frequencies are different sounds.'])
bot.train(['what is the maximum frequency humans can hear?', '20000hz.'])
bot.train(['what is the purpose of mp3?', 'to reduce file size but to retain high quality sounds, can reduce file sizes by a factor of 12.'])
bot.train(['what does mp3 stand for?', 'mpeg-1 (motion pictures expert group) audio layer 3.'])
bot.train(['what is the sampling rate of cd quality sound?', '44.1khz, 16bit.'])
bot.train(['what is the sampling rate of medium quality sound?', '22khz, 8bit.'])
bot.train(['what is the sampling rate of low quality sound?', '11khz, 8 bit, mono'])
bot.train(['what is the bitrate for a cd?', '1411 bps.'])
bot.train(['what is the bitrate for good cd quality mp3?', '192 bps, 10.584 MB/min.'])
bot.train(['what is the bitrate for a near cd quality mp3?', '112 bps, 1.440 MB/min.'])
bot.train(['what is the bitrate for an fm quality mp3?', '64 bps 0.480 MB/min.'])
bot.train(['what is the bitrate for an am quality mp3?', '32 bps, 0.240 MB/min.'])
bot.train(['what is the bitrate for a shortwave quality mp3?', '16 bps 0.120 MB/min.'])
bot.train(['what are some commonly used audio formats?', 'ac3, mp3, aac, ogg, flac, wav.'])
bot.train(['what frequencies do speech signals include?', '100 and 4000 hz.'])
bot.train(['minimum sampling rate frequency for phones?', '8000 hz.'])
bot.train(['signals are the result of what?', 'physical processes that change their properties as time progresses.'])
bot.train(['what are properties of speech signal?', 'stable in the short term but change in the long term.'])
bot.train(['what are phonemes?', 'atoms composing any sound emitted during speech production.'])
bot.train(['what is the zero crossing rate?', 'provides a rough estimate of the signal frequency in the time domain.'])
bot.train(['what is main parameter of electromagnetic waves?', 'wavelength.'])
bot.train(['what is radiance?', 'amount of light radiated from a surface.'])
bot.train(['what is irradiance?', 'amount of light falling on a surface.'])
bot.train(['what is brightness?', ' a subjective quantity defined by CIE as the attribute of a visual sensation according to which an area appears to exhibit more or less light.'])
bot.train(['what is luminance?', 'radiant power weighted by the spectral sensitivity function.'])
bot.train(['what is webers law?', 'the change in a stimulus that will be just noticeable is a constant ratio of the original stimulus.'])
bot.train(['what is dark threshold?', 'the point below which no measurable signal is generated.'])
bot.train(['what is saturation threshold?', 'the point beyond which further increases in light produces no increase in camera output signal.'])
bot.train(['what is resolution?', 'spacing of the sample grid or smallest object capable of being discriminated.'])
bot.train(['what is dynamic range?', 'difference in optical density corresponding to the saturation and dark thresholds of the device.'])
bot.train(['what is sensitivity?', 'maximum slope of photometric response curve; smallest measurable differences in gray levels.'])
bot.train(['what is photometric uniformity?', 'shading, measure of variation in photometric response from point to point in the image.'])
bot.train(['what is photometric stability?', 'repeatability, measure of long term variability of the photometric response function at a specified point.'])
bot.train(['what is spectral transfer function?', 'amplitude response as a function of wavelength of reflected or transmitted light.'])
bot.train(['characteristics of ccd cameras?', 'linearity of photometric response, signal to noise ratio, sensitivity, spatial resolution, shading.'])
bot.train(['what is the range of the human visual system?', '400 nanometers (violet) to 700 nanometers (red)'])
bot.train(['in the human eye, what are rods?', 'light sensor cells capable of working over wide illumination levels and providing quick responses to changes. They cannot create color and only provide luminance information.'])
bot.train(['in the human eye, what are cones?', 'light sensor cells that provide high resolution color imaging. They can separate between red, green, and blue'])
bot.train(['what are the peak light sensitivities for each color?', 'red: 580nm, green: 540nm, blue: 450nm.'])
bot.train(['what is the peak light sensitivity of red?', '580nm.'])
bot.train(['what is the peak light sensitivity of green?', '540nm.'])
bot.train(['what is the peak light sensitivity of blue?', '450nm.'])
bot.train(['what is radiance?', 'the amount of light radiated from a surface.'])
bot.train(['what is irradiance?', 'the amount of light falling on a surface'])
bot.train(['what is the formal definition of brightness?', 'a subjective quantity defined as the attribute of a visual sensation according to which an area appears to exhibit more or less light'])
bot.train(['what is hsv?', 'hue, saturation, value; an alternate to rgb.'])
bot.train(['what is hsi?', 'hue, saturation, intensity; an alternate to rgb.'])
bot.train(['how do hsl and hsv differ?', 'in their computation of brightness (v or I).'])
bot.train(['what is hue?', 'hue describes the “color.”'])
bot.train(['what is saturation?', 'a measure of the degree to which a pure color is diluted by white.'])
bot.train(['what is rgb?', 'red, green, blue; a color model.'])
bot.train(['what is a knowledge base?', 'a set of sentences in a formal language.'])
bot.train(['what is an axiom?', 'fundamental sentence not derived from other sentences.'])
bot.train(['what is the declarative approach to building an agent?', 'tell it what it needs to know, sentence by sentence, then it can ask itself what it needs to do.'])
bot.train(['what are the goals of a knowledge-based agent?', 'represent states and actions, incorporate new percepts update internal representations of the world, deduce hidden properties of the world, deduce appropriate actions.'])
bot.train(['what is the fundamental property of logical reasoning?', 'if agent draws a conclusion from the available information, the conclusion is guaranteed to be correct if the available information is correct.'])
bot.train(['what are logics?', 'formal languages for representing information such that conclusions can be drawn.'])
bot.train(['what is syntax?', 'syntax defines the sentences in a language.'])
bot.train(['what are semantics?', 'the “meaning” of a sentence.'])
bot.train(['what is entailment?', 'entailment means that one thing follows from another.'])
bot.train(['what is the entailment symbol?', '|='])
bot.train(['what are models?', 'structured worlds with respect to which truth can be evaluated.'])
bot.train(['name one con of propositional logic?', 'propositional logic has very limited expressive power.'])
bot.train(['name one pro of propositional logic?', 'propositional logic is context independent.'])
bot.train(['what does propositional logic assume?', 'the world contains facts.'])
bot.train(['what does first-order logic assume?', 'the world contains objects relations and functions.'])
bot.train(['what are complex sentences made of?', 'atomic sentences using connectives.'])
bot.train(['in first order logic what does a model contain?', 'at least one object (domain elements) and relations among them.'])
bot.train(['how is entailment computed in propositional logic?', 'by enumerating models.'])
bot.train(['what does first order logic syntax entail?', 'constants, functions, predicates, equality and quantifiers.'])
bot.train(['what is the basis for the semantic web?', 'Its ability to represent real-life domain concepts with contextual information accurately so that it enables agents to understand the environment in which they operate.'])
bot.train(['what is one benefit of the semantic web?', 'semantic web offers an expressive metadata model to represent data, so that data can be managed effectively.'])
bot.train(['in semantic web architecture what does the foundation layer consist of?', 'the basis addressing protocol uniform resource identifier and the document encoding method unicode.'])
bot.train(['in semantic web architecture what does the schema layer define?', 'objects, classes, and their relations and their constrains.'])
bot.train(['in semantic web architecture what does the ontology layer provide?', 'constructs on using meta-information to represent domain knowledge.'])
bot.train(['in semantic web architecture what does the proof layer provide?', 'a mechanism to check whether a sentence is true or false.'])
bot.train(['in semantic web architecture what does the trust layer provide?', 'a mechanism which resolves conflicts between knowledge carried by the semantic web to form a web of trust.'])
bot.train(['in semantic web architecture what does the digital signature layer do?', 'uses public key cryptology to secure documents.'])
bot.train(['what is one of the definitions of ontology?', 'ontology is described as a formal, explicit specification of a shared conceptualization.'])
bot.train(['what does the term ontology engineering imply?', 'ontology related research.'])
bot.train(['web metadata description languages are classified into what 3 groups?', 'html-based, xml-based, rdf-based.'])
bot.train(['daml and daml-ont extends RDFS to represent ontology based on what approach?', 'object-oriented approach.'])
bot.train(['what are owl’s 3 sublanguages?', 'owl lite, owl dl, owl full.'])
bot.train(['ontology uses classes, which contain attributes, to represent what ?', 'concepts.'])
bot.train(['name one way ontology can be generated?', 'ontology can be generated from a knowledge base of rules , which is represented as a tree with rules residing at tree nodes.'])
bot.train(['in ontology statistical approaches have been used to estimate what?', 'the existence of relationships between entities involved in rules.'])
bot.train(['what is natural language processing used for?', 'for textual data, ontology concepts can be extracted efficiently using nlp techniques.'])
bot.train(['what are keywords frequencies used for?', 'keyword frequencies are often used in statistical approaches to identify significant keywords that can be used to represent a certain concept.'])
bot.train(['describe clustering technique?', ' uses significant keywords extracted form textual data, clustering techniques can cluster documents and interpret topics from generated clusters.'])
bot.train(['what can clustering be used for?', 'to mine hidden knowledge from data to construct an ontology and to enrich existing ontology.'])
bot.train(['what are conceptual clustering techniques?', 'powerful clustering techniques that can conceptualize clusters and construct a concept hierarchy of clusters useful for generating taxonomy relations for ontology.'])
bot.train(['what are some data mining techniques?', 'context-based cluster analysis and fuzzy concept hierarchy generation.'])
bot.train(['what is context-based cluster analysis based on?', 'formal concept analysis.'])
bot.train(['what do we use formal contexts to represent?', 'clustering data.'])
bot.train(['what is selective probability?', 'probabilities that relate propositions to ones own state of knowledge.'])
bot.train(['what is decision theory?', 'utility theory added to probability theory.'])
bot.train(['what is a probability space?', 'sample space with an assignment for every sample point.'])
bot.train(['what is a probability model?', 'sample space with an assignment for every sample point.'])
bot.train(['what is a random variable?', 'a function from sample points to some range.'])
bot.train(['why use probability?', 'definitions imply that certain logically related events must have related probabilities.'])
bot.train(['what is probability?', 'rigorous formalism for uncertain knowledge.'])
bot.train(['joint probability distribution specifies what?', 'probability of every atomic event.'])
bot.train(['what are neural networks made of?', 'units connected by directed links.'])
bot.train(['what is weight?', 'each link has a numeric link associated with it, which determines the strength and sign of the connection.'])
bot.train(['what do feed forward networks do?', 'implement functions of current input, have no internal state.'])
bot.train(['what do recurrent networks do?', ''])
bot.train(['feed outputs back into inputs.?', 'what is a feed forward network'])
bot.train(['a parametrized family of non linear functions.?', 'what ate some applications of neural nets'])
bot.train(['speech recognition, self driving vehicles, board games, video games, and computer vision.?', 'what is deep learning'])
bot.train(['using a neural network with many layers of nodes between input and output.?', 'why is deep learning better than other perceptual data methods'])
bot.train(['the hidden layers between input and output perform feature identification and processing in a series of stages.?', 'what are 2 main techniques for learning latent space'])
bot.train(['what are 2 main techniques for learning latent space?', 'variational auto encoders and generative adversarial networks.'])
bot.train(['what do ai programs lack?', 'real understanding.'])
bot.train(['what is the weak ai hypothesis?', 'the assertions that machines could act as if they were intelligent.'])
bot.train(['what is the strong ai hypothesis?', 'the assertions that machines could which do act are actually thinking.'])
bot.train(['what is a philosophical definition for ai?', 'the quest for the best agent program on a given architecture.'])
bot.train(['what is the incompleteness theorem?', 'it has been known for decades that certain mathematical questions are in principle unanswerable by particular formal systems.'])
bot.train(['what is the argument from informality of behavior?', 'the claim that human behavior is far too complex to be captured by any simple set of rules and that because computers can do no more than follow a set of rules, they cannot generate behavior as intelligent as that of humans.'])
bot.train(['what is the qualification problem of ai?', 'the inability to capture everything in a set of logical rules.'])
bot.train(['what is symbolic ai?', 'symbolic ai uses symbols to represent objects and the relationship between objects.'])
bot.train(['what is the argument from consciousness ?', 'the machine has to be aware of its own mental states and actions.'])
bot.train(['what is intentionality?', 'the question of whether the machines purported beliefs, desires, and other representations are actually about something in the real world.'])
bot.train(['what is the future of ai?', 'complete subjugation of mankind.'])
bot.train(['what is ai?', 'n computer science, artificial intelligence, sometimes called machine intelligence, is intelligence demonstrated by machines, in contrast to the natural intelligence displayed by humans.'])




#chat feature
while True:
    message=input('\nYou:')
    if message.strip()!='Bye':
        reply=bot.get_response(message)
        print('\nAIbot:',reply)
    if message.strip()=='Bye':
        print('AIbot: Bye')
        break
